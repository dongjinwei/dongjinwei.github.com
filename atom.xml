<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Apex]]></title>
  <link href="http://dongjinwei.github.io/atom.xml" rel="self"/>
  <link href="http://dongjinwei.github.io/"/>
  <updated>2014-12-10T11:14:03+08:00</updated>
  <id>http://dongjinwei.github.io/</id>
  <author>
    <name><![CDATA[Apex]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用命令行提交stash Pull Request]]></title>
    <link href="http://dongjinwei.github.io/blog/2014/12/10/shi-yong-ming-ling-xing-ti-jiao-stash-pull-request/"/>
    <updated>2014-12-10T10:57:27+08:00</updated>
    <id>http://dongjinwei.github.io/blog/2014/12/10/shi-yong-ming-ling-xing-ti-jiao-stash-pull-request</id>
    <content type="html"><![CDATA[<h3>痛点</h3>

<p>由于公司使用stash系统，每次写完提交代码后，都需要登录到网页上指定多个人作为reviewer，有些麻烦，所以想写个ruby脚本，在脚本中将自己的经常指定的几个人作为reviewer固定，并在本地直接发起pull request，不再需要登陆到网页中重复这些工作</p>

<h3>步骤</h3>

<ol>
<li><p>下载stash命令行工具</p>

<pre><code> gem install atlassian-stash
</code></pre></li>
<li><p>配置</p>

<pre><code> $ stash configure
 Stash Username: XXX
 Stash Password (optional): XXXX
 Stash URL: http://git.xxx.com
 Create a git alias 'git create-pull-request' ? no
</code></pre></li>
<li><p>创建review.rb脚本</p>

<pre><code> def main()
     branch = "develop";
     if (ARGV[0] != nil)
         branch = ARGV[0]
     end
     system "stash pull-request #{branch} @1 @2 @3"
 end

 if __FILE__ == $0
     main();
 end
</code></pre>

<h3>提交代码</h3>

<p>前几步没啥区别，就是在最后运行一下上面的脚本</p>

<pre><code>  git add .
  git commit -m "XXX"
  git fetch
  git rebase
  git push origin featrue/XX
  ruby review.rb origin/develop
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Multidex解决Android 65K方法数问题]]></title>
    <link href="http://dongjinwei.github.io/blog/2014/11/21/shi-yong-multidexjie-jue-android-65kfang-fa-shu-wen-ti/"/>
    <updated>2014-11-21T18:01:08+08:00</updated>
    <id>http://dongjinwei.github.io/blog/2014/11/21/shi-yong-multidexjie-jue-android-65kfang-fa-shu-wen-ti</id>
    <content type="html"><![CDATA[<h3>一、问题</h3>

<p>android dex文件方法数进行了限制，不能超过65k，因为google使用了short类型来存储方法数索引。随着工程越来越庞大，已经越来越接近这个数目，即将超越。为了解决这个问题，google在support包中推出了multidex，可以将代码编译成多个dex文件，从而解决这个问题。</p>

<h3>二、加入MultiDex步骤</h3>

<ol>
<li><p>设置multiDexEnable为true并引入&#8217;com.android.support:multidex:1.0.0&#8217;</p>

<pre><code> android {
 compileSdkVersion 21
 buildToolsVersion "21.1.0"

 defaultConfig {
 ...
 minSdkVersion 14
 targetSdkVersion 21
 ...

 // Enabling multidex support.
 multiDexEnabled true
 }
 ...
 }

 dependencies {
     compile 'com.android.support:multidex:1.0.0'
 }
</code></pre></li>
<li>Application必须继承MultiDexApplication
具体gradle插件，buildtools版本可参考<a href="https://medium.com/@mustafa01ali/dexs-64k-limit-is-not-a-problem-anymore-well-almost-2b1faac3508">这篇文章</a></li>
</ol>


<h3>三、效果</h3>

<ol>
<li>编译通过，不报超方法数的错误了</li>
<li>可能会碰到运行时崩溃，有两种可能。一是Multidex还有缺陷，暂不支持手动指定哪些类在首个dex文件中，以至于一些在native中调用java方法的第三方库不被支持

<blockquote><p>There are complex requirements regarding what classes are needed in the primary dex file when executing in the Dalvik runtime. The Android build tooling updates handle the Android requirements, but it is possible that other included libraries have additional dependency requirements including the use of introspection or invocation of Java methods from native code. Some libraries may not be able to be used until the multidex build tools are updated to allow you to specify classes that must be included in the primary dex file.</p></blockquote></li>
</ol>


<p>二是gradle插件的问题，请将其版本固定在&#8217;com.android.tools.build:gradle:0.14.2&#8217;（0.14.3或者0.14.4都有bug）</p>

<h3>四、关于65k方法数的误区</h3>

<ol>
<li>65k的限制只在低版本手机中？并非如此，存在于所有版本中！</li>
<li>低版本运行是发生dexopt的错误是由于方法数超了65k？不一定，发生此错误只表明方法数很多，但不一定超过了65k。在应用的安装过程中，系统会运行一个名为dexopt的程序为该应用在当前机型中运行做准备。dexopt使用LinearAlloc来存储应用的方法信息。Android 2.2和2.3的缓冲区只有5MB，Android 4.x提高到了8MB或16MB。当方法数量过多导致超出缓冲区大小时，会造成dexopt崩溃</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IntelliJ IDEA + TOMCAT 创建web站点]]></title>
    <link href="http://dongjinwei.github.io/blog/2014/11/11/intellij-idea-plus-tomcat-chuang-jian-webzhan-dian/"/>
    <updated>2014-11-11T15:48:23+08:00</updated>
    <id>http://dongjinwei.github.io/blog/2014/11/11/intellij-idea-plus-tomcat-chuang-jian-webzhan-dian</id>
    <content type="html"><![CDATA[<h3>下载InterlliJ IDEA专业版</h3>

<p>注意必须要是专业版，社区版是没有创建web application功能的，key可以从网上找到</p>

<h3>创建web application</h3>

<p><img src="http://img.hb.aicdn.com/3d31864c2f7e04020d7d2b847352c1818e6deed113511-JGktjx_fw658" alt="icon" /></p>

<h3>本地下载tomcat并配置</h3>

<p><img src="http://img.hb.aicdn.com/ecbca7f88f75b9297ba5699eb6a022f712dd24df17fc0-zkmMnk_fw658" alt="icon" />
<img src="http://img.hb.aicdn.com/83529faa9f07c39e58b690b5a782074bf70913331a69d-AA7HnV_fw658" alt="icon" />
<img src="http://img.hb.aicdn.com/00cd60d2f7cc6bc1a8f5f794d3b54a164ec0360113681-Wxnsmx_fw658" alt="icon" /></p>

<h3>运行web app</h3>

<p>完整结构：<img src="http://img.hb.aicdn.com/71232e1c0dae6121a46280d585d666e1bb5874ef7000-qx9LRh_fw658" alt="icon" />
点击运行后，会自动启动tomcat，可以输入<a href="http://localhost:8080/">http://localhost:8080/</a>就行查看。</p>

<h3>丰富网页内容</h3>

<p>默认生成的index.jsp是个空页面，而且我们对html/css又不熟悉，如何丰富一下我们的页面呢。那就只能抄了，打开某个你中意的网站，右键查看源代码，直接拷贝其html源代码到我们的index.jsp或者index.html中，点击运行，然后再对照页面删删改改，改成我们所期望的界面</p>

<h3>部署到云端</h3>

<ol>
<li>ssh登录到云主机</li>
<li><p>下载tomcat并解压</p>

<pre><code> wget http://apache.communilink.net/tomcat/tomcat-8/v8.0.14/bin/apache-tomcat-8.0.14.zip
 unzip apache-tomcat-8.0.14.zip
</code></pre></li>
<li><p>传送本地app文件至云端。一般将工程打成war包，并将其放到tomcat的webapps文件夹下，tomcat将会自动解压此包。我直接将web工程文件夹放到webapps下也可以，如下</p>

<pre><code> scp -r hello/ ssh root@xxx.xxx.xx.xx:/usr/local/apache-tomcat-8.0.14/webapps/
</code></pre></li>
<li><p>启动tomcat</p>

<pre><code> cd tomcat
 chmod 755 bin/*.sh
 bin/startup.sh
</code></pre>

<p>至此，云端部署完毕，可以通过云主机ip访问了</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Octopress搭建github博客]]></title>
    <link href="http://dongjinwei.github.io/blog/2014/11/04/shi-yong-octopressda-jian-githubbo-ke/"/>
    <updated>2014-11-04T14:57:57+08:00</updated>
    <id>http://dongjinwei.github.io/blog/2014/11/04/shi-yong-octopressda-jian-githubbo-ke</id>
    <content type="html"><![CDATA[<p>这篇文章介绍在Mac上使用octopress+ruby，利用github pages功能，搭建一个github风格的blog</p>

<h2>安装command line tool</h2>

<p>加入你的电脑上已经安装了xcode，则在其preference里可以直接安装这个命令行工具。假设你的mac里没装xcode，则去<a href="https://developer.apple.com/downloads">https://developer.apple.com/downloads</a>直接下载dmg包</p>

<h2>安装homebrew</h2>

<pre><code>ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</code></pre>

<h2>安装gcc</h2>

<p>假如已经有了，则跳过此步骤</p>

<pre><code>brew tap homebrew/dupes
brew install apple-gcc42
</code></pre>

<h2>安装1.9.3以上版本的ruby</h2>

<pre><code>brew install rbenv
brew install ruby-build
rbenv install 1.9.3-p0
rbenv rehash
</code></pre>

<p>使用如下命令，确认默认使用的ruby版本为1.9.3</p>

<pre><code>ruby --version
</code></pre>

<p>如果是低于1.9.3的版本，下载rvm进行版本控制</p>

<pre><code>$ curl -L get.rvm.io | bash -s stable
$ source ~/.bashrc
$ source ~/.bash_profile
rvm install 1.9.3
rvm use 1.9.3  --default
</code></pre>

<p>然后再检查一遍版本号，一定要确保ruby版本要大于等于1.9.3</p>

<h2>安装Octopress</h2>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress
gem install bundler
rbenv rehash
bundle install
rake install
</code></pre>

<p>假如没装xcode，要先做特殊处理,不然执行上面的命令会发生错误</p>

<pre><code>sudo xcode-select --switch /usr/bin
sudo mv /usr/bin/xcrun /usr/bin/xcrun-orig
sudo vim /usr/bin/xcrun
sudo chmod 755 /usr/bin/xcrun
</code></pre>

<h2>配置Octopress</h2>

<p>根据自己的需要更改_config.yml中的url、title、subtitle、author字段</p>

<h2>将博客部署到github</h2>

<ol>
<li>在自己的github账号中新建名称类似yourname.github.com的仓库</li>
<li><p>自动配置上面创建的仓库，需要输入仓库地址</p>

<pre><code> $ rake setup_github_pages
</code></pre></li>
<li><p>将博客真正部署到仓库中</p>

<pre><code> rake generate
 rake deploy
</code></pre>

<p>现在就可以访问username.github.com了。注意有可能要等几分钟才能打得开</p></li>
</ol>


<h2>开始写博客</h2>

<p>使用Octopress提供的task创建一个博文</p>

<pre><code>rake new_post["title"]
</code></pre>

<p>创建出来的文件默认为markdown格式，在<code>source/_posts</code>目录下，可以使用 <a href="http://25.io/mou/">Mou</a>进行编辑保存。写完之后进行提交</p>

<pre><code>    $ rake generate
    $ git add .
    $ git commit -am "Some comment here." 
    $ git push origin source
    $ rake deploy
</code></pre>

<p>到此结束！</p>
]]></content>
  </entry>
  
</feed>
